stages:
  - build
  - test
  - docker_build
  - push
  - deploy

variables:
  REGISTRY: docker.io
  IMAGE_NAME: bachxuanphong/student-cicd
  IMAGE_TAG: latest

  # 👇 Tell Docker CLI where to find the daemon (the DinD service)
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

default:
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  tags:
    - student-code
  before_script:
    - apk add --no-cache nodejs npm
    - echo "🔧 Environment ready."

.build:
  stage: build
  script:
    - echo "🏗️ Building project..."
    - |
      if [ -f package.json ]; then
        npm install
        npm run build || echo "No build script found, skipping..."
      else
        echo "No package.json found, skipping npm build."
      fi
  dependencies:
    - build 
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour

.test:
  stage: test
  script:
    - echo "🧪 Running tests..."
    - |
      if [ -f package.json ]; then
        npm test || echo "No test script found, skipping tests..."
      else
        echo "No tests to run."
      fi

.docker_build:
  stage: docker_build
  script:
    - echo "🐳 Building Docker image..."
    - docker info
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - echo "🚀 Pushing Docker image to DockerHub..."
    - docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD" $REGISTRY
    - docker push $IMAGE_NAME:$IMAGE_TAG
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
  script:
    - echo "🚀 Deploying to remote server..."
    # Add server host key to known_hosts
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa

    - chmod 700 ~/.ssh
    - |
      echo "🚀 Deploying to $DEPLOY_SERVER_IP ..."
      ssh -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER_IP '
        docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD" &&
        docker pull "$IMAGE_NAME:$IMAGE_TAG" &&
        docker rm -f frontend-app || true &&
        docker run -d --name frontend-app -p 88:80 "$IMAGE_NAME:$IMAGE_TAG"
      '