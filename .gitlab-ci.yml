stages:
  - build
  - test
  - docker_build
  - push

variables:
  REGISTRY: docker.io
  IMAGE_NAME: bachxuanphong/student-cicd
  IMAGE_TAG: latest

  # 👇 Tell Docker CLI where to find the daemon (the DinD service)
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

default:
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
  tags:
    - student-code
  before_script:
    - apk add --no-cache nodejs npm
    - echo "🔧 Environment ready."

build:
  stage: build
  script:
    - echo "🏗️ Building project..."
    - |
      if [ -f package.json ]; then
        npm install
        npm run build || echo "No build script found, skipping..."
      else
        echo "No package.json found, skipping npm build."
      fi
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour

test:
  stage: test
  script:
    - echo "🧪 Running tests..."
    - |
      if [ -f package.json ]; then
        npm test || echo "No test script found, skipping tests..."
      else
        echo "No tests to run."
      fi

docker_build:
  stage: docker_build
  script:
    - echo "🐳 Building Docker image..."
    - docker info
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .

push:
  stage: push
  script:
    - echo "🚀 Pushing Docker image to DockerHub..."
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin $REGISTRY
    - docker push $IMAGE_NAME:$IMAGE_TAG
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
  script:
    - echo "🚀 Deploying to remote server..."
    # Add server host key to known_hosts
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "$DEPLOY_SERVER_IP" >> ~/.ssh/known_hosts

    # SSH into server and deploy
    - ssh $DEPLOY_USER@$DEPLOY_SERVER_IP << EOF
        docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
        docker pull $IMAGE_NAME:$IMAGE_TAG
        docker stop frontend-app || true
        docker rm frontend-app || true
        docker run -d --name frontend-app -p 80:80 $IMAGE_NAME:$IMAGE_TAG
      EOF
      
